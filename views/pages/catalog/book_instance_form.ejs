<%- include('../../partials/head') -%>

<%- include('../../partials/header-n-side-nav') -%>

<h2 class="h2 mt-5"><%= title %></h2>
<%- include('../../partials/form-error') -%>
<form id="book-instance-form" class="was-validated">
<!-- <form action="" method="POST" id="book-instance-form"> -->

  <div id = "alert_placeholder"></div>

    <div class="form-group">
      <label for="id">Internal Id:</label>
      <input class="form-control" type="text" name="id" id="id" placeholder="100" required
        value="<%= typeof book_instance!='undefined' ? book_instance.id : '' %>" autocomplete="off" >
        <div class="invalid-feedback">Internal Id is required</div>
        <div class="valid-feedback">Looks good</div>
    </div>

    <div class="form-group">
    <label for="book">Choose a Book:</label>
    <input class="form-control" list="book-list" id="book" name="book"  required aria-placeholder="Select Book" value="<%= typeof book_instance!='undefined' ? book_instance.book.title : '' %>" autocomplete="off"/>
    <datalist name="book-list" id="book-list" >
    
    </datalist>
    <div class="invalid-feedback">Name of book is required</div>
    <div class="valid-feedback">Looks good</div>
  </div>

  <div class="form-group">
    <label for="price">Price (in Rs):</label>
    <input class="form-control" type="text" name="price" id="price" placeholder="100" required
      value="<%= typeof book_instance!='undefined' ? book_instance.price : '' %>">
      <div class="invalid-feedback">Price of book is required</div>
      <div class="valid-feedback">Looks good</div>
  </div>

  <div class="form-group">
    <label for="date_purchased">Date when book purchased:</label>
    <input class="form-control" type="date" name="date_purchased" id="date_purchased" placeholder="22/03/2020"
      value="<%= typeof book_instance!='undefined' && book_instance.date_purchased !='undefined' ? book_instance.dp : '' %>">
      <div class="valid-feedback">Date purchased is not mandatory</div>
  </div>

  <div class="form-group">
    <label for="status">Status:</label>
    <select class="form-control" type="select" name="status" id="status" aria-placeholder="Select Status" required>
      <option value="Available"
        <%= (typeof book_instance!= 'undefined' && book_instance.status == 'Available') ? 'selected' : '' %>>
        Available
      </option>
      <option value="Maintenance"
        <%= (typeof book_instance!= 'undefined' && book_instance.status == 'Maintenance') ? 'selected' : '' %>>
        Maintenance
      </option>
      <option value="Loaned"
        <%= (typeof book_instance!= 'undefined' && book_instance.status == 'Loaned') ? 'selected' : '' %>>
        Loaned
      </option>
      <option value="Reserved"
        <%= (typeof book_instance!= 'undefined' && book_instance.status == 'Reserved') ? 'selected' : '' %>>
        Reserved
      </option>

    </select>
    <div class="invalid-feedback">Status book is required</div>
    <div class="valid-feedback">Looks good</div>
  </div>

  <button class="btn btn-primary" type="submit">Submit</button>
</form>

<script>
  function bookInstance() {
    const bookInstanceForm = document.getElementById('book-instance-form');
    const bookList = document.getElementById('book-list');
    const book = document.getElementById('book');
    const alertPlaceholder = document.getElementById("alert_placeholder");

    let books = [];
    let filteredBooks = [];
    
    fetch('/api/books')
    .then(response => {console.log(response); return response.json()})
    .then(data => {
      console.log(data);
      books = data.books;
      return data;})
    .catch((err) => {
      console.log("There was some erro");
    });

    function handleInputChange(e) {
      console.log(e.target.value);
      let val = e.target.value;
      filteredBooks = val.length !== 0 ? books.filter((book) => {
          return book.title.toLowerCase().match(val.toLowerCase());
      }) : [];
      console.log("FilteredBooks", filteredBooks);
      bookList.innerHTML = "";
      filteredBooks.forEach(book => {
        // const option = `<option value="${book.title}"></option>`
        
        let option = document.createElement('option');
        option.value = book.title;
        option.id = book._id;
        bookList.appendChild(option);
      });
      
    }
    // for (book of books) {
    //   console.log(book.title);
    // }
    // console.log(JSON.parse(JSON.stringify(books)));

    function handleFormSubmit(e) {
      e.preventDefault();
      console.log("form submitted");
      const formData = new FormData(document.querySelector('form'))
      const bookInstanceObj = {};
      for (let pair of formData.entries()) {
        console.log(pair);
        if (pair[1]) {
          bookInstanceObj[pair[0]] = pair[1];
        } else {
          bookInstanceObj[pair[0]] = undefined;
        }
        
        // console.log(pair[0] + ': ' + pair[1]);
      }
      // if (bookInstanceObj['date_purchased'])
      console.log(bookInstanceObj);
      console.log(filteredBooks)
      if (!books.find((book) => book.title.toLowerCase() === bookInstanceObj['book'].trim().toLowerCase())){
        console.log("Book not in database display an alert message");
        const alertMsg = 'Book does not exist in the database. Add book to databse first';
        alertPlaceholder.innerHTML = `<div class="alert alert-danger"><a class="close" data-dismiss="alert">Ã—</a><span>${alertMsg}</span></div>`
      } else {
        alertPlaceholder.innerHTML = '';
        books.forEach(book => {
          if (book.title.toLowerCase() === bookInstanceObj['book'].trim().toLowerCase()) {
            bookInstanceObj['book'] = book['_id'];
          }
        })
        console.log(bookInstanceObj);

        (async () => {
          try {
            // will call a fetch for creating a bookInstance and based on whether the bookInstance is updated or created, call the appropriate route. 
            
            const currentPageUrl = window.location.href;
            // rather than hardcoding url in fetch
            // as '/catalog/bookinstance/create'
            // and checking whether to make a create or update request
            
            console.log(currentPageUrl);
            const response = await fetch(currentPageUrl, {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(bookInstanceObj),
            // redirect: 'follow',
            });

            if (response.redirected) {
              window.location.href = response.url;
            }
          } catch (error) {
            console.log("An error occured in form submission");
          }
          
        })();
        // fetch("/catalog/bookinstance/create", {
        //   method: "POST", 
        //   body: JSON.stringify(bookInstanceObj)
        // }).then(res => {
        //   console.log("Request complete! response:", res);
        // });
      }
      // TODO: Make sure bookInstanceObj['book'] is in filteredList. lowerCase, strip and full string
      // Take id of book from filteredList and assign to bookInstanceObj['book']
      // If book not in list, alert msg that book should be added to DB. 
      // Make a POST request using fetch
    }
    
    book.addEventListener('keyup', handleInputChange);
    bookInstanceForm.addEventListener('submit', handleFormSubmit);

  }

  bookInstance();
</script>

<%- include('../../partials/footer') -%>