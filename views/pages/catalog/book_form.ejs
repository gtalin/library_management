<%- include('../../partials/head') -%>

<%- include('../../partials/header-n-side-nav') -%>

<h2 class="h2 mt-5"><%= title %></h2>
<%- include('../../partials/form-error') -%>
<!-- <form action="" method="POST"> -->
<form id="book-form" class="was-validated">

  <div id = "alert_placeholder"></div>

  <div class="form-group">
    <label for="title">Title:</label>
    <input class="form-control" type="text" name="title" id="title" placeholder="Name of Book" required
      value="<%= typeof book!='undefined' ? book.title : '' %>">
      <div class="invalid-feedback">Name of book is required</div>
      <div class="valid-feedback">Looks good</div>
  </div>

  <div class="form-group">
    <label for="author">Choose an Author:</label>
    <input class="form-control" list="author-list" id="author" name="author"  required aria-placeholder="Select author" value="<%= typeof book!='undefined' ? book.author.name : '' %>" autocomplete="off"/>
    <datalist name="author-list" id="author-list" >
    </datalist>
    <div class="invalid-feedback">Name of author is required</div>
      <div class="valid-feedback">Looks good</div>
  </div>

  <div class="form-group">
    <label for="publisher">Publisher:</label>
    <input class="form-control" name="publisher" id="publisher"
      placeholder="Enter publisher of the book" value="<%= typeof book!='undefined' && book.publisher != undefined ? book.publisher : '' %>" 
      />
      <div class="valid-feedback">Name of publisher is not mandatory</div>
  </div>

  <div class="form-group">
    <label for="summary">Summary:</label>
    <textarea class="form-control" name="summary" id="summary" rows="3"
      placeholder="Enter summary of the book"><%= typeof book!='undefined' && book.summary != undefined ? book.summary : '' %></textarea>
      <div class="valid-feedback">Summary of book is not mandatory</div>
  </div>

  <button class="btn btn-primary" type="submit">Submit</button>
</form>

<%- include('../../partials/footer') -%>

<script>
  function book() {
    const bookForm = document.getElementById('book-form');
    const authorList = document.getElementById('author-list');
    const author = document.getElementById('author');
    const alertPlaceholder = document.getElementById("alert_placeholder");

    let authors = [];
    let filteredAuthors = [];
    
    fetch('/api/authors')
    .then(response => {return response.json()})
    .then(data => {
      console.log(data);
      authors = data.authors;
      return data;})
    .catch((err) => {
      console.log("There was some error");
    });

    function name() {
      let fullname = '';
    if (this.first_name && this.family_name) {
      fullname = `${this.family_name}, ${this.first_name}`;
    } else if (!this.first_name && this.family_name) {
      fullname = this.family_name;
    } else if (this.first_name && !this.family_name) {
      fullname = this.first_name;
    }
    return fullname;
    }

    function handleInputChange(e) {
      console.log(e.target.value);
      let val = e.target.value;
      filteredAuthors = val.length !== 0 ? authors.filter((author) => {
          return name.apply(author).toLowerCase().match(val.toLowerCase());
      }) : [];
      console.log("FilteredAuthors", filteredAuthors);
      authorList.innerHTML = "";
      filteredAuthors.forEach(author => {
        // const option = `<option value="${author.title}"></option>`
        
        let option = document.createElement('option');
        option.value = name.apply(author);
        option.id = author._id;
        authorList.appendChild(option);
      });
      
    }
    

    function handleFormSubmit(e) {
      e.preventDefault();
      console.log("form submitted");
      const formData = new FormData(document.querySelector('form'))
      const bookObj = {};
      for (let pair of formData.entries()) {
        console.log(pair);
        bookObj[pair[0]] = pair[1];
        // console.log(pair[0] + ': ' + pair[1]);
      }
      console.log(bookObj);
      
      if (!authors.find((author) => name.apply(author).toLowerCase() === bookObj['author'].trim().toLowerCase())){
        console.log("Author not in database display an alert message");
        const alertMsg = 'Author does not exist in the database. Add Author to databse first';
        alertPlaceholder.innerHTML = `<div class="alert alert-danger"><a class="close" data-dismiss="alert">Ã—</a><span>${alertMsg}</span></div>`
      } else {
        alertPlaceholder.innerHTML = '';
        authors.forEach(author => {
          if (name.apply(author).toLowerCase() === bookObj['author'].trim().toLowerCase()) {
            bookObj['author'] = author['_id'];
          }
        })
        console.log(bookObj);

        (async () => {
          try {
            // will call a fetch for creating a book and based on whether the book is updated or created, call the appropriate route. 
            
            const currentPageUrl = window.location.href;
            // rather than hardcoding url in fetch
            // as '/catalog/book/create'
            // and checking whether to make a create or update request
            
            console.log(currentPageUrl);
            const response = await fetch(currentPageUrl, {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(bookObj),
            // redirect: 'follow',
            });

            if (response.redirected) {
              window.location.href = response.url;
            }
          } catch (error) {
            console.log("An error occured in form submission");
          }
          
        })();
        // fetch("/catalog/book/create", {
        //   method: "POST", 
        //   body: JSON.stringify(bookObj)
        // }).then(res => {
        //   console.log("Request complete! response:", res);
        // });
      }
      // TODO: Make sure bookObj['book'] is in filteredList. lowerCase, strip and full string
      // Take id of book from filteredList and assign to bookObj['book']
      // If book not in list, alert msg that book should be added to DB. 
      // Make a POST request using fetch
    }
    
    author.addEventListener('keyup', handleInputChange);
    bookForm.addEventListener('submit', handleFormSubmit);

  }

  book();
</script>